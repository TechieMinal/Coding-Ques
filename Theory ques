Explain the concept of a prefix sum array and its applications.

A prefix sum array is a data structure used to store cumulative sums of elements from the start of an array up to each index. It enables O(1) range sum queries.

Applications:
Range Sum Queries: Quickly calculate sums of subarrays.
Equilibrium Index: Find where left and right sums are equal.
Sliding Window Problems: Efficiently compute window sums.
Algorithm Optimization: Used in problems like counting subarrays with given sums.
It's code-
public class PrefixSumApplication {
    public static void main(String[] args) {
        int[] arr = {2, 4, 6, 8, 10};
        int[][] queries = {{1, 3}, {0, 4}}; // Queries: [L, R]

        // Build prefix sum array
        int[] prefix = new int[arr.length];
        prefix[0] = arr[0];
        for (int i = 1; i < arr.length; i++) {
            prefix[i] = prefix[i - 1] + arr[i];
        }

        // Process queries
        for (int[] query : queries) {
            int L = query[0];
            int R = query[1];
            int sum = prefix[R] - (L == 0 ? 0 : prefix[L - 1]);
            System.out.println("Sum from index " + L + " to " + R + ": " + sum);
        }
    }
}

  Ques 50. Explain the concept of equilibrium index and its applications in array problems.
An equilibrium index in an array is an index where the sum of elements before it (left subarray) is equal to the sum of elements after it (right subarray).

Formally: For an array arr[], index i is an equilibrium index if:
arr[0] + arr[1] + ... + arr[i-1] = arr[i+1] + arr[i+2] + ... + arr[n-1].

Applications:
Partitioning Arrays:
Split arrays into two parts with equal sums (e.g., for load balancing).

Algorithm Design:
Used in problems like pivot indices (similar to equilibrium index).

Data Analysis:
Identify points where cumulative distributions balance (e.g., in statistics).

Dynamic Programming:
Preprocessing arrays for quick sum queries (prefix/suffix sums).

Example:
Input Array: [1, 2, 3, 4, 3, 2, 1]
Equilibrium Index: 3 (Value = 4)
Left sum: 1 + 2 + 3 = 6
Right sum: 3 + 2 + 1 = 6




3




